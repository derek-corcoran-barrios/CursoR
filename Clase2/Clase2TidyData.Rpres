<style>
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
</style>

<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Clase 2 Tidy Data y manipulación de datos
========================================================
author: Derek Corcoran
date: "`r format(Sys.time(), '%d/%m, %Y')`"
autosize: true
transition: rotate

Estructura de datos
========================================================
incremental: true

- Vector: Un conjunto lineal de datos (secuencia génica, serie de tiempo)
- Matrix: Una tabla con solo números
- Data Frame: Una tabla donde cada columna tiene un tipo de datos (estándar dorado)
- List: Aqui podemos meter lo que queramos

***

![data](Data.png)

Vector
========================================================
left: 60%
incremental: true

* Secuencia lineal de datos
* Pueden ser de muchos tipos (numéricos, de carácteres, lógicos, etc.)
* Ejemplo data(uspop)
* para crear uno c(1,4,6,7,8)
* para subsetear un vector se pone el índice entre []
* uspop[4], uspop[2:10], uspop[c(3,5,8)]

***

![Vector](Vector.jpg)


Data Frame
========================================================
incremental: true
* Una tabla, cada columna un tipo de datos (Numérico, lógico, etc)
* Cada columna un vector
* Ejemplo data(iris)
* Para subsetear data.frame[filas,columnas]
* Ejemplos iris[,3], iris[,"Petal.Length"], iris[2:5,c(1,5)], iris$Petal.Length



***

![DataFrame](DataFrame.jpg)

Tidy Data 
========================================================
incremental: true
![Tidy](tidy.png)

* Cada columna una variable
* Cada fila una observación

untidy data
===========
```{r, echo=FALSE, message = FALSE, warning = FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="960px",out.height="700px"}
library(knitr)
include_graphics("UntidyONU.png")
```

untidy data
===========
![unTidy](untidy.jpg)

Un tipo especial de untidy data
===========
class: small-code

* Tablas de contingencia
* Ejemplo data(HairEyeColor)
* como limpiarlo paquete *epitools* función *expand.table*

```{r}
data("HairEyeColor")
HairEyeColor[,,1]
```
***
```{r}
library(epitools)
library(knitr)
H <- expand.table(HairEyeColor)
kable(head(H))
```

prueba de la limpieza
==============
class: small-code

* Generando modelos lineales usando lm/glm
* Formato lm(y ~ x1 + x2 + ... + xn, data = Data.frame)
```{r, eval=FALSE}
data(iris)
model1 <- lm(Petal.Length ~ Species, data = iris)
library(stargazer)
stargazer(model1, type = "html", single.row=TRUE)
```

***
```{r, echo=FALSE, results="asis"}
data(iris)
model1 <- lm(Petal.Length ~ Species, data = iris)
library(stargazer)
stargazer(model1, type = "html", single.row=TRUE)
```


dplyr
========================================================
incremental: true
 
Paquete con pocas funciones [muy poderosas](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

- *summarize*
- *group_by*
- *filter* 
- *select* junto a *starts_with* o *ends_with*
- *%>%* pipeline

summarize y group_by
=================
- *summarize* resume una variable
- *Group_by* reune observaciones según una variable
- Usadas en conjunto muy poderosas

```{r}
library(dplyr)
library(knitr)
MEAN <- summarize(iris, MEAN.PETAL = mean(Petal.Length))
kable(MEAN)
```

summarize y group_by (continuado)
=================

```{r}
library(dplyr)
library(knitr)
MEAN <- group_by(iris, Species)
MEAN <- summarize(MEAN, MEAN.PETAL = mean(Petal.Length))
kable(MEAN)
```

Pipeline (%>%)
=================
class: small-code

- Ahorra líneas, se parte con un data.frame
- Se agregan funciones de dplyr hasta llegar al resultado deseado

```{r}
library(dplyr)
library(knitr)
MEAN <- iris %>% group_by(Species) %>% summarize(MEAN.PETAL = mean(Petal.Length))
kable(MEAN)
```

Pipeline (%>%) otro ejemplo
==========================

```{r}
library(dplyr)
library(knitr)
MEAN <- iris %>% group_by(Species) %>% summarize_all(mean)
kable(MEAN)
```

Filter
=======
incremental:true
- Selecciona según una o más variables
```{r, echo=FALSE}
DF <- data.frame(simbolo = c("<", ">", "==", ">=", "<="), significado = c("Mayor que", "Menor que", "Igual a", "mayor o igual a", "menor o igual a"), simbolo_cont = c("!=","%in%", "is.na", "!is.na", "| &"), significado_cont = c("distinto a", "dentro del grupo", "es NA", "no es NA", "o, y"))
kable (DF)
```

Ejemplos de filter agregando a lo anterior
===============================
class: small-code

```{r}
library(dplyr)
data("iris")
DF <- iris %>% filter(Species != "versicolor") %>% group_by(Species) %>% summarise_all(mean)
kable(DF)
```


Select
=======================
class: small-code

* Selecciona columnas dentro de un data.frame

```{r}
library(dplyr)
library(knitr)
data(nasa)
Nasa2 <- as.data.frame(nasa)
Temp <- Nasa2 %>% filter(year != 1995) %>% group_by(year) %>% select(contains("temp")) %>% summarize_all(mean)
```
***
```{r}
kable(Temp)
```

```{r, echo=FALSE, eval=FALSE}
library(readr)
library(ggplot2)
classic_rock <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/classic-rock/classic-rock-song-list.csv")
colnames(classic_rock)<- make.names(colnames(classic_rock))
ggplot(classic_rock, aes(x = Release.Year)) + geom_histogram()  + xlim(c(1950, 2010))
```

Ejercicios
========================================================
incremental: true

* Usando la base de datos *storm* del paquete *dplyr*, calcula la velocidad promedio y diámetro promedio (hu_diameter) de las tormentas declaradas huracanes por año
    + solución:
    + storms %>% filter(status == "hurricane") %>% select(year, wind, hu_diameter) %>% group_by(year) %>% summarize_all(mean)
* Usando la base de datos *iris* crea un inline code que diga cuál es la media del largo del pétalo de la especie *Iris virginica*
    + solución:
    + la media para I. virginica es `r mean((iris %>% filter(Species == "virginica"))$Petal.Length)`

Ejercicios 2
==================================
incremental: true

* Crear dos modelos lineales para la base de datos *mtcars* uno para autos de cambios automáticos y uno para autos de cambios manuales basados en el peso del automóvil
    + Manuales <- filter(mtcars, am == 1)
    + Auto <- filter(mtcars, am == 0)
    + ManualLM <- lm(mpg ~ wt, data = Manuales)
    + AutoLM <- lm(mpg ~ wt, data = Auto)

Resultado
===========
class: small-code

```{r, results = "asis"}
library(stargazer)
Manuales <- filter(mtcars, am == 1)
Auto <- filter(mtcars, am == 0)
ManualLM <- lm(mpg ~ wt, data = Manuales)
AutoLM <- lm(mpg ~ wt, data = Auto)
stargazer(ManualLM, AutoLM, type = "html", single.row=TRUE)
```

Meta del día de hoy
===================

Piensen en una pregunta a resolver con sus datos