<style>
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
</style>

<style>
.small-code pre code {
  font-size: 1em;
}
</style>


Clase6 Loops (purrr) y bibliografía (rticles)
========================================================
author: Derek Corcoran
date: "`r format(Sys.time(), '%d/%m, %Y')`"
autosize: true
transition: rotate


Ejercicio
===================
incremental:true
class: small-code

* Leer el archivo IB15Tem.csv de la carpeta T&H
* Este archivo es la temperatura medida cada una hora del sitio de estudio IB15
* Asegurarse que las fechas estén en formato fecha y no texto
* Eliminar columnas innecesarias
* Agregar una columna con el ID del sitio, en este caso IB15

```{r}
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
```


Ejercicio
===================
incremental:true
class: small-code

```{r}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv")
```


```{r}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv") %>% rename(Temperatura = Value, Date.Time = `Date/Time`)
```

```{r}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv") %>% rename(Temperatura = Value, Date.Time = `Date/Time`) %>% select(Date.Time, Temperatura)
```

```{r}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv") %>% rename(Temperatura = Value, Date.Time = `Date/Time`) %>% select(Date.Time, Temperatura) %>% mutate(Date.Time = dmy_hms(Date.Time)) %>% mutate(ID = "IB15")

```

Ejercicio
===================
class: small-code
```{r}
knitr::kable(IB15Tem)
```

Ejercicio
===================
class: small-code

```{r}
ggplot(IB15Tem, aes(x = Date.Time, y = Temperatura)) + geom_line() + theme_classic()
```


========================================================
# ¿Cómo lo hacemos con todos los archivos de la carpeta H&T?

ya tenemos una receta

¿Qué es un loop?
========================================================
incremental:true

### Para Cada x has y

* Creamos la receta
* Copiar y pegar
* for loops
* familia apply
* purrr!!!!!

***
```{r, echo = FALSE}
knitr::include_graphics("purrr.jpg")
```

========================================================
class: small-code

# map(.x , .f)

* para cada elemento de .x, has .f
* .x = puede ser un vector o lista
* .f = usualmente una función
* Siempre entrega una lista

```{r}
library(purrr)
x <- c(1,2,3,4,5,6,7,8,9,10)
map(.x =x, .f = sqrt)
```

Volvamos a la receta basica
===========
class: small-code
incremental:true
```{r, eval=FALSE}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv") %>% rename(Temperatura = Value, Date.Time = `Date/Time`) %>% select(Date.Time, Value) %>% mutate(Date.Time = dmy_hms(Date.Time)) %>% mutate(ID = "IB15")
```

* Vamos a la primera parte

```{r, eval=FALSE}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv")
```

* ¿Que queremos?

```{r, eval=FALSE}
Temperaturas <- map(.x = ArchivosTemp, .f = read_csv)
```

* Necesitamos un vector o lista *ArchivosTemp* que contenga todos los archivos que vamos a leer

Si solo existiera una función que leyera todos los archivos de una carpeta
========
class: small-code
incremental:true
```{r, echo=FALSE}
knitr::include_graphics("Dexter_thinking.jpg")
```

```{r}
setwd("/home/derek/Documents/CursoR/Clase6/T&H")
Archivos <- list.files()
```

```{r}
ArchivosTemp <- list.files(pattern = "Tem.csv")
```

Empezemos nuestro loop
====
class: small-code
incremental:true

```{r}
Temperaturas <- map(.x = ArchivosTemp, .f = read_csv)
```

* Si le agregamos argumentos a una función agregamos un ~ antes de la función y un .x en vez de los datos

```{r}
Temperaturas <- map(.x = ArchivosTemp, .f = read_csv) %>% map(~rename(.x, Temperatura = Value, Date.Time = `Date/Time`))
```

* A partir de esto podemos avanzar mucho

```{r}
Temperaturas <- ArchivosTemp %>% map(read_csv) %>% map(~rename(.x, Temperatura = Value, Date.Time = `Date/Time`)) %>% map(~mutate(.x, Date.Time = dmy_hms(Date.Time))) %>% map(~select(.x, Date.Time, Temperatura))
```

¿Qué nos falta?
====
class: small-code
incremental:true

```{r, eval=FALSE}
IB15Tem <- read_csv("~/Documents/CursoR/Clase6/T&H/IB15Tem.csv") %>% rename(Temperatura = Value, Date.Time = `Date/Time`) %>% select(Date.Time, Value) %>% mutate(Date.Time = dmy_hms(Date.Time)) %>% mutate(ID = "IB15")
```

```{r, eval=FALSE}
... %>% mutate(ID = "IB15")
```

* Necesitamos un vector con todos lo ID de los sitios
* *stringr*, paquete adyacente al tidyverso que nos permite trabajar con caracteres
* Donde tenemos los nombres de los sitios?

```{r}
library(stringr)
setwd("/home/derek/Documents/CursoR/Clase6/T&H")
ArchivosTemp <- list.files(pattern = "Tem.csv")
IDs <- str_replace(ArchivosTemp, "Tem.csv", "")
IDs
```

Ahora necesitamos trabajar con 2 archivos
=====
incremental:true
# map2(.x , .y, .f)

* para cada elemento de .x, has .f
* .x = puede ser un vector, lista o dataframe (para cada columna)
* .y = segundo archivo, puede ser un vector, lista o dataframe 
* .f = usualmente una función
* Siempre entrega una lista

Sigamos con el ejercicio
===========


```{r, eval=FALSE}
Temperaturas <- ArchivosTemp %>% map(read_csv) %>% map(~rename(.x, Temperatura = Value, Date.Time = `Date/Time`)) %>% map(~mutate(.x, Date.Time = dmy_hms(Date.Time, truncated = 1))) %>% map(~select(.x, Date.Time, Temperatura)) %>% map2(.y = IDs, ~ mutate(.x, ID = .y))
```

Para finalizar el ejercicio
===========
class: small-code
incremental:true

* Tenemos una lista con 114 data frames
* Necesitamos guardarlo en uno
* funcion *reduce* de purrr

```{r, eval=FALSE}
library(purrr)
x <- c(1,2,3,4,5,6,7,8,9,10)
map(.x =x, .f = sqrt)
```

```{r}
library(purrr)
x <- c(1,2,3,4,5,6,7,8,9,10)
map(.x =x, .f = sqrt) %>% reduce(c)
```

* Para unir varios data frame *rbind*

Para finalizar el ejercicio
===========
class: small-code

```{r}
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(stringr)
library(stringr)
setwd("/home/derek/Documents/CursoR/Clase6/T&H")
ArchivosTemp <- list.files(pattern = "Tem.csv")
IDs <- str_replace(ArchivosTemp, "Tem.csv", "")
Temperaturas <- ArchivosTemp %>% map(read_csv) %>% map(~rename(.x, Temperatura = Value, Date.Time = `Date/Time`)) %>% map(~mutate(.x, Date.Time = dmy_hms(Date.Time, truncated = 1))) %>% map(~select(.x, Date.Time, Temperatura)) %>% map2(.y = IDs, ~ mutate(.x, ID = .y)) %>% reduce(rbind) 

Temperaturas
```

for loops
=========
class: small-code
incremental:true
* for(i in 1:n){funcion, remplazando cada elemento por una i}
* Por ejemplo para graficar
```{r}
setwd("/home/derek/Documents/CursoR/Clase6")
library(raster)
bio.stack <- readRDS("bio.stack.rds")
plot(bio.stack)
```

for loops
======
class: small-code
```{r}
brks <- round(seq(floor(cellStats(bio.stack[[1]], stat = "min", na.rm = TRUE)), ceiling(cellStats(bio.stack[[8]], stat = "max", na.rm = TRUE)), length.out = 10), 0)
nb <- length(brks)-1 
colors <- rev(heat.colors(nb))
plot(bio.stack, col = colors, breaks = brks)
```

for loops
======
class: small-code
```{r}
plot(bio.stack[[1]], col = colors, breaks = brks)
```
***

```{r}
years <- as.character(seq(2000, 2070, by = 10))
plot(bio.stack[[1]], col = colors, breaks = brks, main = paste("Mean temperature", years[1]))
```

for loops
======
class: small-code
```{r, eval=FALSE}
library(animation)
saveGIF(
for(i in 1:8){
  plot(bio.stack[[i]], col = colors, breaks = brks, main = paste("Mean temperature", years[i]))
}
,movie.name = "Mean_temp.gif", img.name = "Rplot", convert = "convert", clean = TRUE)
```

rticles
======

```{r, echo=FALSE}
knitr::include_graphics("Rticles.png")
```

***

```{r, echo=FALSE}
knitr::include_graphics("rticles2.png")
```

rticles
======

```{r, echo=FALSE}
knitr::include_graphics("Citation1.png")
```

```{r, echo=FALSE}
knitr::include_graphics("Citation2.png")
```
***

```{r, echo=FALSE}
knitr::include_graphics("Citation3.png")
```

rticles
======

```{r, echo=FALSE}
knitr::include_graphics("Citation4.png")
```

rticles
======

```{r, echo=FALSE}
knitr::include_graphics("Citation5.png")
```

Bibliofrafía en no Rmd
======

```{r, echo=FALSE}
knitr::include_graphics("Citation6.png")
```

para más informacion revisar [acá](http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html).

Bibliofrafía en no Rmd
======
incremental:true

Evaluación 2 (31 de Octubre)

* Transformar Rpubs de html a PDF
* Debe tener
    + Al menos un chunk
    + Al menos un inline code
    + Al menos una tabla con leyenda
    + Al menos una figura con leyenda
    + Al menos una cita y su bibliografía

***

Evaluación Final

* Una presentación en Rpubs
* Máximo 5 minutos
* Debe tener
    + Al menos un chunk
    + Al menos un inline code
    + Al menos una figura
    + Para el martes 31 de Octubre
    + Mínimo 3 diapositivas
    